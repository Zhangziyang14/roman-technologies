/* Auto-generated by genmsg_cpp for file /home/hans/roman-technologies/roman/msg/Key.msg */
#ifndef ROMAN_MESSAGE_KEY_H
#define ROMAN_MESSAGE_KEY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roman
{
template <class ContainerAllocator>
struct Key_ {
  typedef Key_<ContainerAllocator> Type;

  Key_()
  : keys()
  , values()
  {
  }

  Key_(const ContainerAllocator& _alloc)
  : keys(_alloc)
  , values(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _keys_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  keys;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _values_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  values;


  ROS_DEPRECATED uint32_t get_keys_size() const { return (uint32_t)keys.size(); }
  ROS_DEPRECATED void set_keys_size(uint32_t size) { keys.resize((size_t)size); }
  ROS_DEPRECATED void get_keys_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->keys; }
  ROS_DEPRECATED void set_keys_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->keys = vec; }
  ROS_DEPRECATED uint32_t get_values_size() const { return (uint32_t)values.size(); }
  ROS_DEPRECATED void set_values_size(uint32_t size) { values.resize((size_t)size); }
  ROS_DEPRECATED void get_values_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->values; }
  ROS_DEPRECATED void set_values_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->values = vec; }
private:
  static const char* __s_getDataType_() { return "roman/Key"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "647e6845363f4bdce24380c5a29aeb12"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8[] keys\n\
uint8[] values\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, keys);
    ros::serialization::serialize(stream, values);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, keys);
    ros::serialization::deserialize(stream, values);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(keys);
    size += ros::serialization::serializationLength(values);
    return size;
  }

  typedef boost::shared_ptr< ::roman::Key_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roman::Key_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Key
typedef  ::roman::Key_<std::allocator<void> > Key;

typedef boost::shared_ptr< ::roman::Key> KeyPtr;
typedef boost::shared_ptr< ::roman::Key const> KeyConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roman::Key_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roman::Key_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roman::Key_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roman::Key_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roman::Key_<ContainerAllocator> > {
  static const char* value() 
  {
    return "647e6845363f4bdce24380c5a29aeb12";
  }

  static const char* value(const  ::roman::Key_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x647e6845363f4bdcULL;
  static const uint64_t static_value2 = 0xe24380c5a29aeb12ULL;
};

template<class ContainerAllocator>
struct DataType< ::roman::Key_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roman/Key";
  }

  static const char* value(const  ::roman::Key_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roman::Key_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8[] keys\n\
uint8[] values\n\
\n\
";
  }

  static const char* value(const  ::roman::Key_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roman::Key_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.keys);
    stream.next(m.values);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Key_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roman::Key_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roman::Key_<ContainerAllocator> & v) 
  {
    s << indent << "keys[]" << std::endl;
    for (size_t i = 0; i < v.keys.size(); ++i)
    {
      s << indent << "  keys[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.keys[i]);
    }
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.values[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROMAN_MESSAGE_KEY_H

